<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frank Wang&#39;s Coding World</title>
    <link>http://www.wangxingfeng.com/index.xml</link>
    <description>Recent content on Frank Wang&#39;s Coding World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>[Frank Wang](//www.wangxingfeng.com). Powered by [Hugo](//gohugo.io).</copyright>
    <lastBuildDate>Sat, 24 Jun 2017 17:04:42 +0800</lastBuildDate>
    <atom:link href="http://www.wangxingfeng.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>一个Geek的评论系统Gitment</title>
      <link>http://www.wangxingfeng.com/use_gitment_as_comment_system_for_your_blog.html</link>
      <pubDate>Sat, 24 Jun 2017 17:04:42 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/use_gitment_as_comment_system_for_your_blog.html</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/imsun/gitment&#34;&gt;Gitment&lt;/a&gt;是一个使用GitHub Issues 搭建的评论系统。本文教你如何使用Gitment作为自己博客的评论系统。&lt;/p&gt;

&lt;h2 id=&#34;先简单介绍下优缺点&#34;&gt;先简单介绍下优缺点：&lt;/h2&gt;

&lt;h3 id=&#34;1-优点&#34;&gt;1.优点：&lt;/h3&gt;

&lt;p&gt;Gitment支持在前端直接引入，不需要任何后端代码，可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持，尤为适合各种基于 GitHub Pages 的静态博客或项目页面。&lt;/p&gt;

&lt;h3 id=&#34;2-缺点&#34;&gt;2.缺点：&lt;/h3&gt;

&lt;p&gt;只能使用 GitHub 账号进行评论。每篇文章需要自己手动用GitHub账号登录并初始化，其他用户才能评论。&lt;/p&gt;

&lt;h2 id=&#34;使用方法&#34;&gt;使用方法：&lt;/h2&gt;

&lt;h3 id=&#34;第一步-注册-oauth-application&#34;&gt;第一步: 注册 OAuth Application&lt;/h3&gt;

&lt;p&gt;在 GitHub 上注册一个新的 &lt;a href=&#34;https://github.com/settings/applications/new&#34;&gt;OAuth Application&lt;/a&gt;。前面3项内容都可以随意填写，但要确保最后一个 &lt;code&gt;Authorization callback URL&lt;/code&gt; 是你的网站域名(比如&lt;a href=&#34;http://www.wangxingfeng.com)。&#34;&gt;http://www.wangxingfeng.com)。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;成功注册之后，你将会得到一个 client ID 和一个 client secret，这个将被用于之后的实例化 Gitment。&lt;/p&gt;

&lt;h3 id=&#34;第二步-页面引入-gitment-的静态资源文件&#34;&gt;第二步: 页面引入 Gitment 的静态资源文件&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://imsun.github.io/gitment/style/default.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://imsun.github.io/gitment/dist/gitment.browser.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然你也可以选择把这两个静态资源文件下载到本地，然后放到你的站点对应静态资源目录下。&lt;/p&gt;

&lt;h3 id=&#34;第三步-实例化-gitment&#34;&gt;第三步: 实例化 Gitment&lt;/h3&gt;

&lt;p&gt;1.在需要使用评论系统的页面（一般情况下，找到你的文章的模板页）新增一个DOM节点用于放置评论框区域的内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;comment&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.在该页面加入如下的配置脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var gitment = new Gitment({
  id: &#39;页面 ID&#39;, 
  owner: &#39;你的 GitHub ID&#39;,
  repo: &#39;存储评论的 repo&#39;,
  oauth: {
    client_id: &#39;你的 client ID&#39;,
    client_secret: &#39;你的 client secret&#39;,
  },
})
gitment.render(&#39;comment&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;p&gt;1.&lt;code&gt;gitment.render()&lt;/code&gt;这个方法的参数就是你的评论区域 div 的 id 名;&lt;/p&gt;

&lt;p&gt;2.页面 ID 如果不写，默认为 location.href。&lt;/p&gt;

&lt;h3 id=&#34;第四步-初始化评论功能&#34;&gt;第四步：初始化评论功能&lt;/h3&gt;

&lt;p&gt;第三步之后，你需要把你的网站部署到线上。如果前面三步没出错的话，应该能够看到评论框了。这个时候是不能够评论的。&lt;/p&gt;

&lt;p&gt;点击在评论框的右侧&amp;rsquo;Login with GitHub&amp;rsquo; , 用你的 GitHub 登录， 然后点击中间那个蓝色的 &lt;code&gt;Initialize Comments&lt;/code&gt;按钮，对该页面的评论功能进行初始化。&lt;/p&gt;

&lt;p&gt;现在，你的&lt;code&gt;这个页面&lt;/code&gt;的访客就可以使用 GitHub 账号登录进行评论了。唯一不足的是，每个页面的评论框都需要手动地初始化。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python操作MySQL学习笔记</title>
      <link>http://www.wangxingfeng.com/python_mysqldb.html</link>
      <pubDate>Tue, 20 Jun 2017 07:44:01 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/python_mysqldb.html</guid>
      <description>

&lt;h2 id=&#34;一-应用架构&#34;&gt;一、应用架构&lt;/h2&gt;

&lt;p&gt;客户端 &amp;ndash;&amp;gt; 业务逻辑层 &amp;ndash;&amp;gt; 数据访问层 &amp;ndash;&amp;gt; 数据库&lt;/p&gt;

&lt;h2 id=&#34;二-python-db-api&#34;&gt;二、 Python DB API&lt;/h2&gt;

&lt;p&gt;Python应用程序（包含SQL) &amp;ndash;&amp;gt; Python DB API（访问数据库的统一规范接口MySQLdb） &amp;ndash;&amp;gt; MySQL / Oracle / SQLServer等数据库&lt;/p&gt;

&lt;p&gt;1.数据库连接对象：connection&lt;/p&gt;

&lt;p&gt;2.数据库交互对象：cursor&lt;/p&gt;

&lt;p&gt;3.数据库异常类: exceptions&lt;/p&gt;

&lt;h2 id=&#34;三-访问数据库流程&#34;&gt;三、访问数据库流程：&lt;/h2&gt;

&lt;p&gt;创建连接对象connection &amp;ndash;&amp;gt; 获取交互对象cursor &amp;ndash;&amp;gt; 执行查询/执行命令/获取数据/处理数据等 &amp;ndash;&amp;gt; 关闭cursor &amp;ndash;&amp;gt; 关闭connection&lt;/p&gt;

&lt;h2 id=&#34;四-数据库连接对象-connection&#34;&gt;四、数据库连接对象：connection&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;建立Python客户端与数据库的网络连接&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建方法： MySQLdb.Connect()&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;参数：&lt;/p&gt;

&lt;p&gt;host 数据库服务器地址&lt;/p&gt;

&lt;p&gt;port 端口号， 数字类型&lt;/p&gt;

&lt;p&gt;user 用户名&lt;/p&gt;

&lt;p&gt;passwd 密码&lt;/p&gt;

&lt;p&gt;db 数据库名称&lt;/p&gt;

&lt;p&gt;charset 编码格式, utf8&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;4.方法：&lt;/p&gt;

&lt;p&gt;cursor() 获取交互对象（游标）&lt;/p&gt;

&lt;p&gt;commit() 提交当前事务&lt;/p&gt;

&lt;p&gt;rollback() 回滚当前事务&lt;/p&gt;

&lt;p&gt;close() 关闭连接&lt;/p&gt;

&lt;h2 id=&#34;五-数据库交互对象-游标-cursor-用于执行查询和获取结果&#34;&gt;五、数据库交互对象（游标）cursor: 用于执行查询和获取结果&lt;/h2&gt;

&lt;p&gt;1.方法：&lt;/p&gt;

&lt;p&gt;1）execute(op [, args] )    执行SQL,将结果从数据库获取到客户端，存在本地缓冲区。&lt;/p&gt;

&lt;p&gt;2）fetch*() 方法：移动指针rownumber， 返回数据。&lt;/p&gt;

&lt;p&gt;fetchone() 获取结果集的下一行&lt;/p&gt;

&lt;p&gt;fetchmany(size) 获取结果集的下几行&lt;/p&gt;

&lt;p&gt;fetchall() 获取结果集中剩下的所有行&lt;/p&gt;

&lt;p&gt;3）close() 关闭游标对象&lt;/p&gt;

&lt;p&gt;2.属性：rowcount 最近一次execute返回数据的行数或影响的行数。&lt;/p&gt;

&lt;h2 id=&#34;六-事务&#34;&gt;六、事务&lt;/h2&gt;

&lt;p&gt;1.访问和更新数据库的一个程序执行单元，可以包含多个SQL语句或命令的操作。&lt;/p&gt;

&lt;p&gt;2.必须设置引擎为INNODB。&lt;/p&gt;

&lt;p&gt;3.特性：&lt;/p&gt;

&lt;p&gt;1）原子性：事务包含的所有操作，要么不做，要么都做。&lt;/p&gt;

&lt;p&gt;2）一致性：事务必须使数据库从一致性状态变到另一个一致性状态。&lt;/p&gt;

&lt;p&gt;3）隔离性：一个事务的执行不能被其他事务所干扰。&lt;/p&gt;

&lt;p&gt;4）持久性：事务一旦提交，它对数据库的改变就是永久性的。&lt;/p&gt;

&lt;p&gt;4.使用事务：&lt;/p&gt;

&lt;p&gt;1）关闭自动commit：设置conn.autocommit(False);&lt;/p&gt;

&lt;p&gt;2）正常结束事务：conn.commit();&lt;/p&gt;

&lt;p&gt;3）异常结束事务：conn.rollback().&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL数据库的基本数据类型、表的操作和记录的操作</title>
      <link>http://www.wangxingfeng.com/mysql-basic-2.html</link>
      <pubDate>Thu, 08 Jun 2017 07:32:57 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/mysql-basic-2.html</guid>
      <description>

&lt;h2 id=&#34;一-mysql的基本数据类型&#34;&gt;一、MySQL的基本数据类型：&lt;/h2&gt;

&lt;h3 id=&#34;1-数值类型&#34;&gt;1. 数值类型：&lt;/h3&gt;

&lt;p&gt;包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;大小&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;范围（有符号）&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;范围（无符号）&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TINYINT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(-128，127)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(0，255)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小整数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SMALLINT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(-2^15，2^15 -1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(0，2^16 -1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;大整数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MEDIUMINT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(-2^23，2^23 -1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(0，2^24 -1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;大整数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;INT或INTEGER&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(-2^31，2^31 -1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(0，2^32 -1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;大整数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;BIGINT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(-2^63，2^63 -1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(0，2^64 -1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;极大整数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0，(1.175 494 351 E-38，3.402 823 466 E+38)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;单精度浮点数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DOUBLE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;双精度浮点数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DECIMAL&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DECIMAL(M,D)。如果M&amp;gt;D，为M+2否则为D+2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;依附于M和D的值&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;依附于M和D的值&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小数值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;DECIMAL(M,D)：&lt;/p&gt;

&lt;p&gt;M指定指定小数点左边和右边可以存储的十进制数字的最大个数，最大精度38。&lt;/p&gt;

&lt;p&gt;D指定小数点右边可以存储的十进制数字的最大个数。小数位数必须是从 0 到 a之间的值。默认小数位数是 0。&lt;/p&gt;

&lt;h3 id=&#34;2-字符型&#34;&gt;2. 字符型：&lt;/h3&gt;

&lt;p&gt;字符串类型主要包括CHAR、VARCHAR、TEXT、MEDIUMTEXT、LONGTEXT、EMU等。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;大小&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CHAR&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0~2^8-1 (0~255) 字节&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;定长字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;VARCHAR&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0~2^16-1 (0~65536) 字节&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;变长字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TINYTEXT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0~2^8-1 (0~255) 字节&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;短文本字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TEXT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0~2^16-1 (0~65536)字节&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;长文本数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MEDIUMTEXT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0~2^24-1 (0~16777215)字节&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;中等长度文本数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LONGTEXT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0~2^32-1 (0~4294967296)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;极大文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;定长字符串：没有达到指定长度，尾部空格补齐。&lt;/p&gt;

&lt;h3 id=&#34;3-日期时间类型&#34;&gt;3. 日期时间类型：&lt;/h3&gt;

&lt;p&gt;表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。&lt;/p&gt;

&lt;p&gt;每个时间类型有一个有效值范围和一个&amp;rdquo;零&amp;rdquo;值，当指定不合法的MySQL不能表示的值时使用&amp;rdquo;零&amp;rdquo;值。&lt;/p&gt;

&lt;p&gt;类型  大小
(字节)    范围  格式  用途
DATE    3   1000-01-01/9999-12-31   YYYY-MM-DD  日期值
TIME    3   &amp;lsquo;-838:59:59&amp;rsquo;/&amp;lsquo;838:59:59&amp;rsquo;    HH:MM:SS    时间值或持续时间
YEAR    1   &lt;sup&gt;1901&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2155&lt;/sub&gt;   YYYY    年份值
DATETIME    8   1000-01-01 00:00:00/9999-12-31 23:59:59 YYYY-MM-DD HH:MM:SS 混合日期和时间值
TIMESTAMP   4   1970-01-01 00:00:00/2037 年某时    YYYYMMDD HHMMSS 混合日期和时间值，时间戳&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;大小&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;范围&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;格式&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;YEAR&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1901~2155&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;YYYY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;年份值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DATE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1000-01-01 ~ 9999-12-31&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;YYYY-MM-DD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;日期值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TIME&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-838:59:59 ~ 838:59:59&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;HH:MM:SS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;时间值或持续时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DATETIME&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1000-01-01 00:00:00 ~ 9999-12-31 23:59:59&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;YYYY-MM-DD HH:MM:SS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;混合日期和时间值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TIMESTAMP&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4 字节&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1970-01-01 00:00:00 ~ 2037&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;YYYYMMDD HHMMSS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;时间戳&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;二-数据表的操作&#34;&gt;二、数据表的操作：&lt;/h2&gt;

&lt;h3 id=&#34;1-查看当前数据库&#34;&gt;1.查看当前数据库&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;SELECT DATABASE();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-创建数据表&#34;&gt;2.创建数据表&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE [IF NOT EXISTS] table_name ( column_name data_type,...);


CREATE TABLE IF NOT EXISTS user(
    username VARCHAR(20),
    age TINYINT UNSIGNED,
    salary FLOAT(8,2) UNSIGNED
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-查看数据表&#34;&gt;3.查看数据表&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;SHOW TABLES;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看其它数据库的数据表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SHOW TABLES FROM mysql;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-查看数据表结构&#34;&gt;4.查看数据表结构&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;SHOW COLUMNS FROM tbl_name;

SHOW COLUMNS FROM user;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;三-记录的操作&#34;&gt;三、记录的操作：&lt;/h2&gt;

&lt;p&gt;数据表里的行，被称为数据库的记录&lt;/p&gt;

&lt;h3 id=&#34;1-插入记录&#34;&gt;1.插入记录&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;INSERT [INFO] tbl_name [(col_name,..)] VALUES(val,..);

INSERT user VALUES(&#39;Frank&#39;, 22, 3500.18);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果省略了字段名（即列名），则值必须与字段的数量一致，否则会报错。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Column count doesn&#39;t match value count at row 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果对某部分字段赋值，则需要写明字段名。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT user(username,salary)  VALUES(&#39;Jack&#39;, 4500.18);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-查找记录&#34;&gt;2.查找记录&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;SELECT expr,... FROM tbl_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看全部记录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM tbl_name; 

SELECT * FROM user;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-空值&#34;&gt;3.空值&lt;/h3&gt;

&lt;p&gt;NULL, 字段值可以为空；
NOT NULL, 字段值不能为空。&lt;/p&gt;

&lt;p&gt;CREATE TABLE tb2(
    username VARCHAR(20) NOT NULL,
    age TINYINT UNSIGNED NULL
);&lt;/p&gt;

&lt;h3 id=&#34;4-自动编号-auto-increment&#34;&gt;4.自动编号：AUTO_INCREMENT&lt;/h3&gt;

&lt;p&gt;必须与主键组合使用。默认情况下，其实值为1，每次的增量为1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE tb3(
    id SMALLINT UNSIGNED AUTO_INCREMENT,
    username VARCHAR(20) NOT NULL,
    age TINYINT UNSIGNED NULL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;报错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR 1075(42000): Incorrect table definition; there can be only one auto column and it must be defined as a key.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-主键-primary-key&#34;&gt;5.主键：PRIMARY KEY&lt;/h3&gt;

&lt;p&gt;1）每张数据表只能存在一个主键；&lt;/p&gt;

&lt;p&gt;2）主键保证记录的唯一性；&lt;/p&gt;

&lt;p&gt;3）主键自动为NOT NULL.&lt;/p&gt;

&lt;p&gt;创建数据表tb4:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE tb4(
    id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(20) NOT NULL,
    age TINYINT UNSIGNED NULL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;插入记录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT tb3(username) VALUES(&#39;Ross&#39;);
INSERT tb3(username) VALUES(&#39;Richard&#39;);
INSERT tb3(username) VALUES(&#39;Monica&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-唯一约束-unique-key&#34;&gt;5.唯一约束：UNIQUE KEY&lt;/h3&gt;

&lt;p&gt;1）UNIQUE KEY可以保证记录的唯一性；&lt;/p&gt;

&lt;p&gt;2）UNIQUE KEY可以为空值；&lt;/p&gt;

&lt;p&gt;3）每张表里可以存在多个唯一约束。&lt;/p&gt;

&lt;p&gt;创建数据表tb5:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE tb5(
    id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(20) NOT NULL UNIQUE KEY,
    age TINYINT UNSIGNED NULL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看刚刚创建的数据表tb5数据结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SHOW COLUMNS FROM tb5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;插入一条记录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT tb5(username, age) VALUES(&#39;Ross&#39;, 30);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;插入成功，现在已经有一条记录的&lt;code&gt;username&lt;/code&gt;为&amp;rsquo;Ross&amp;rsquo;了。再插入一条记录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT tb5(username, age) VALUES(&#39;Ross&#39;, 28);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;报错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR 1062 (23000): Duplicate entry &#39;Ross&#39; for key &#39;username&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-默认值-default&#34;&gt;6.默认值： DEFAULT&lt;/h3&gt;

&lt;p&gt;当插入记录时，如果没有明确为字段赋值，则自动赋予默认值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE tb6(
    id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(20) NOT NULL UNIQUE KEY,
    sex ENUM(&#39;1&#39;, &#39;2&#39;, &#39;3&#39;) DEFAULT &#39;3&#39;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看刚刚创建的数据表tb6数据结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SHOW COLUMNS FROM tb6;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;插入一条记录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT tb6(username) VALUES(&#39;Frank&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看记录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM tb6;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MySQL入门：语句规范及常用命令</title>
      <link>http://www.wangxingfeng.com/mysql-basic.html</link>
      <pubDate>Sat, 03 Jun 2017 22:38:52 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/mysql-basic.html</guid>
      <description>

&lt;h2 id=&#34;一-mysql语句规范&#34;&gt;一、MySQL语句规范：&lt;/h2&gt;

&lt;p&gt;1.关键字、函数名全部大写；&lt;/p&gt;

&lt;p&gt;2.数据库名、表名、字段名一律小写；&lt;/p&gt;

&lt;p&gt;3.SQL语句必须以分号结尾。&lt;/p&gt;

&lt;h2 id=&#34;二-mysql常用命令&#34;&gt;二、MySQL常用命令：&lt;/h2&gt;

&lt;p&gt;1.显示当前数据库版本
```SQL
    SELECT VERSION();&lt;/p&gt;

&lt;p&gt;2.显示当前时间:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT NOW();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.显示当前用户：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT USER();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.创建数据库：&lt;/p&gt;

&lt;p&gt;语法为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输入如下语句，将会创建数据库test2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE DATABASE test2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果数据库test2已经存在，将会报错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR 1007 (HY000): Can&#39;t create database &#39;test2&#39;; database exists
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果创建数据库的时候加了 &lt;code&gt;IF NOT EXISTS&lt;/code&gt;, 遇到已经存在的数据库，将不会报错，但会有一条&lt;code&gt;WARNING&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE DATABASE IF NOT EXISTS test2;
Query OK, 1 row affected, 1 warning (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想要查看WARNING信息，只需输入&lt;code&gt;SHOW WARNING;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;4.查看数据库：&lt;/p&gt;

&lt;p&gt;语法为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SHOW {DATABASES | SCHEMAS} [LIKE &#39;pattern&#39; | WHERE expr];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输入如下语句，可以查看&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SHOW DATABASES;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.删除数据库：&lt;/p&gt;

&lt;p&gt;语法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DROP {DATABASE | SCHEMA} [IF EXISTS] db_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果数据库test2, 输入以下语句，可以删除该数据库：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DROP DATABASE test2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果需要删除的数据库test2不存在，则会报错。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR 1008 (HY000): Can&#39;t drop database &#39;test2&#39;; database doesn&#39;t exist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果删除时添加了 &lt;code&gt;IF EXISTS&lt;/code&gt;，则不会报错，而是会有一条WARNING:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DROP DATABASE IF EXISTS test2;
Query OK, 1 row affected, 1 warning (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Win7系统MySQL报错ERROR1045及其处理方法</title>
      <link>http://www.wangxingfeng.com/mysql-error-1045.html</link>
      <pubDate>Sat, 03 Jun 2017 21:52:09 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/mysql-error-1045.html</guid>
      <description>&lt;p&gt;最近自学数据库，在&lt;code&gt;Win7&lt;/code&gt;系统下使用&lt;code&gt;MySQL&lt;/code&gt;遇到了一些报错，做个记录，方便以后查阅。&lt;/p&gt;

&lt;p&gt;MySQL官网下载的&lt;code&gt;MySQL 5.5.56&lt;/code&gt;的社区版，安装正常。当我在命令行输入&lt;code&gt;mysql -u root -p&lt;/code&gt; 出现了报错信息，无法连接数据库。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Windows\system32&amp;gt; mysql -u root -p
Enter password: 
ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;网上找到的解决方法如下：&lt;/p&gt;

&lt;p&gt;1.编辑mysql配置文件&lt;code&gt;my.ini&lt;/code&gt;，在&lt;code&gt;[mysqld]&lt;/code&gt;这个条目下加入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;skip-grant-tables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.保存&lt;code&gt;my.ini&lt;/code&gt;退出后重启mysql。&lt;/p&gt;

&lt;p&gt;命令行输入 &lt;code&gt;net stop mysql&lt;/code&gt; 停止MySQL服务；&lt;/p&gt;

&lt;p&gt;命令行输入 &lt;code&gt;net start mysql&lt;/code&gt; 重启MySQL服务；&lt;/p&gt;

&lt;p&gt;3.重置密码：
现在在命令行输入&lt;code&gt;mysql -u root -p&lt;/code&gt;就可以不用密码登录了，出现&lt;code&gt;password：&lt;/code&gt;的时候直接回车可以进入，不会出现&lt;code&gt;ERROR 1045 (28000)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;1）进入mysql数据库：输入&lt;code&gt;use mysql&lt;/code&gt;, 会出现&lt;code&gt;Database changed&lt;/code&gt;的提示信息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; use mysql;

Database changed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2）给root用户设置新密码：输入&lt;code&gt;update user set password=password(&amp;quot;新密码&amp;quot;) where user=&amp;quot;root&amp;quot;;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; update user set password=password(&amp;quot;新密码&amp;quot;) where user=&amp;quot;root&amp;quot;;
Query OK, 1 rows affected (0.01 sec)
Rows matched: 1 Changed: 1 Warnings: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3)刷新数据库: 输入&lt;code&gt;flush privileges;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4)退出mysql：输入&lt;code&gt;quit&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; quit
Bye
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.重新修改配置文件&lt;code&gt;my.ini&lt;/code&gt;，把刚才加入的&lt;code&gt;skip-grant-tables&lt;/code&gt;这行代码删除，保存退出再重启mysql服务就可以了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>重新学习Python</title>
      <link>http://www.wangxingfeng.com/learn-python-again.html</link>
      <pubDate>Thu, 01 Jun 2017 08:03:43 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/learn-python-again.html</guid>
      <description>&lt;p&gt;一年多没怎么用Python这门编程语言了，如今想要写个爬虫啥的，都忘了怎么写。那就重新学习一遍，反正有基础，也花不了多少时间。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>两个Safari浏览器不兼容的坑</title>
      <link>http://www.wangxingfeng.com/safari-not-support.html</link>
      <pubDate>Thu, 01 Jun 2017 07:35:15 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/safari-not-support.html</guid>
      <description>

&lt;h2 id=&#34;一-苹果手机的safari浏览器不兼容new-date-日期转换格式的坑&#34;&gt;一、 苹果手机的Safari浏览器不兼容new Date()日期转换格式的坑&lt;/h2&gt;

&lt;p&gt;做Web项目的开发，&lt;code&gt;倒计时&lt;/code&gt;是个很常见的需求。我的需求是做一个演唱会门票开售时间的倒计时。&lt;/p&gt;

&lt;h3 id=&#34;思路如下&#34;&gt;思路如下：&lt;/h3&gt;

&lt;p&gt;取到 &lt;code&gt;开售时间&lt;/code&gt;和&lt;code&gt;服务器上现在的时间&lt;/code&gt;，用&lt;code&gt;开售时间&lt;/code&gt;减去&lt;code&gt;现在的时间&lt;/code&gt;，得出一个时间毫秒数，然后再转换成xx天xx小时xx分xx秒。&lt;/p&gt;

&lt;p&gt;跟后台技术小哥简单沟通了一下，后台会将&lt;code&gt;开售时间&lt;/code&gt;和&lt;code&gt;现在的时间&lt;/code&gt;传到页面上，放在&lt;code&gt;隐藏域&lt;/code&gt;里，这样我用JavaScript就能取到时间了。so easy! 然后我就开始写代码了。&lt;/p&gt;

&lt;p&gt;一开始我是这样写的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function preSellCount(){
    // 如果没有设置开售时间，则取演出时间，取到的时间格式为2017-06-01 10:00
    var preSt = $(&#39;#preSellTime&#39;).val() || $(&#39;#showTime&#39;).val();  

    var nowTime = $(&#39;#nowTime&#39;).val();

    // 如果没有设置开售时间，也没有设置演出的时间，则倒计时处显示“开售时间待定”
    if (!preSt) {
        $(&#39;#preSellCount&#39;).text(&amp;quot;开售时间待定&amp;quot;);
    }else{

        //取到的开售时间是一个字符串，先转换成毫秒数，
        var sellTime = new Date(preSt).getTime();

        //现在的毫秒数
        var now = new Date(nowTime).getTime();

        var count, d, h, min, sec, timeStr, timer;

        count = now &amp;gt; sellTime ? 0 : Math.floor((sellTime-now)/1000);

        //进来页面的时间不为零，才执行定时器
        if(count!==0){
            // 定时器
            timer = setInterval(function() {
                if (count === 0) {
                    clearInterval(timer);

                    // 倒计时为零时，自动刷新页面
                    window.location.reload();
                }else{
                    
                    // 天数
                    d = Math.floor(count/86400); 

                    // 小时数
                    h = Math.floor(count%86400/3600); 

                    // 分钟数
                    min = Math.floor(count%86400%3600/60); 

                    // 秒钟数
                    sec = Math.floor(count%86400%3600%60);

                    // 小于10的时候，前面补一个‘0’。
                    if (min &amp;lt; 10) {
                        min = &#39;0&#39; + min;
                    }
                    if (sec &amp;lt; 10 ) {
                        sec = &#39;0&#39; + sec;
                    }

                    if (d == 0) {
                        timeStr =  h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + s + &amp;quot;秒&amp;quot;;
                    }else{
                        timeStr = d + &amp;quot;天&amp;quot; + h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + s + &amp;quot;秒&amp;quot;;
                    }
                    // 得到倒计时的时间字符串
                    timeStr = d + &amp;quot;天&amp;quot; + h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + sec + &amp;quot;秒&amp;quot;;

                    // 将字倒计时显示到页面上
                    $(&#39;#preSellCount&#39;).text(timeStr);

                    count -= 1;
                }
            }, 1000);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用Chrome模拟各种手机调试都是一切正常。
发布到本地测试环境，然后用自己的安卓手机访问，也一切正常。
再用同事的苹果手机测试，倒计时不显示。WTF?&lt;/p&gt;

&lt;p&gt;想想哪里可能会有兼容性问题呢？&lt;/p&gt;

&lt;p&gt;从头检查一遍代码。获取开售时间没有问题。
取到的开售时间是一个字符串的日期，用&lt;code&gt;new Date(preSt).getTime()&lt;/code&gt;转换成毫秒数，有没有问题呢？Google一下&lt;code&gt;new Date() iOS&lt;/code&gt;。
果然发现有不少相关文章提到iOS下日期转换问题。由于Safari在iOS5及以下对&lt;code&gt;YYYY-MM-DD&lt;/code&gt;格式的日期不支持，所以需要转换格式。
最简单的是用&lt;code&gt;正则表达式&lt;/code&gt;把日期转换成 &lt;code&gt;YYYY/MM/DD&lt;/code&gt;格式。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
    preSt.replace(/-/g, &amp;quot;/&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终的代码是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function preSellCount(){
    // 如果没有设置开售时间，则取演出时间，取到的时间格式为2017-06-01 10:00
    var preSt = $(&#39;#preSellTime&#39;).val() || $(&#39;#showTime&#39;).val();  
    var nowTime = $(&#39;#nowTime&#39;).val();
    // 如果没有设置开售时间，也没有设置演出的时间，则倒计时处显示“开售时间待定”
    if (!preSt) {
        $(&#39;#preSellCount&#39;).text(&amp;quot;开售时间待定&amp;quot;);
    }else{

        //取到的开售时间是一个字符串，先转换成毫秒数，
        var sellTime = new Date(preSt.replace(/-/g, &amp;quot;/&amp;quot;)).getTime();

        //现在的毫秒数
        var now = new Date(nowTime.replace(/-/g, &amp;quot;/&amp;quot;)).getTime();

        var count, d, h, min, sec, timeStr, timer;

        count = now &amp;gt; sellTime ? 0 : Math.floor((sellTime-now)/1000);

        //进来页面的时间不为零，才执行定时器
        if(count!==0){
            // 定时器
            timer = setInterval(function() {
                if (count === 0) {
                    clearInterval(timer);

                    // 倒计时为零时，自动刷新页面
                    window.location.reload();
                }else{
                    
                    // 天数
                    d = Math.floor(count/86400); 

                    // 小时数
                    h = Math.floor(count%86400/3600); 

                    // 分钟数
                    min = Math.floor(count%86400%3600/60); 

                    // 秒钟数
                    sec = Math.floor(count%86400%3600%60);

                    // 小于10的时候，前面补一个‘0’。
                    if (min &amp;lt; 10) {
                        min = &#39;0&#39; + min;
                    }
                    if (sec &amp;lt; 10 ) {
                        sec = &#39;0&#39; + sec;
                    }

                    if (d == 0) {
                        timeStr =  h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + s + &amp;quot;秒&amp;quot;;
                    }else{
                        timeStr = d + &amp;quot;天&amp;quot; + h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + s + &amp;quot;秒&amp;quot;;
                    }
                    // 得到倒计时的时间字符串
                    timeStr = d + &amp;quot;天&amp;quot; + h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + sec + &amp;quot;秒&amp;quot;;

                    // 将字倒计时显示到页面上
                    $(&#39;#preSellCount&#39;).text(timeStr);

                    count -= 1;
                }
            }, 1000);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;二-苹果手机的safari浏览器不支持-keydown-keypress-keyup-change等事件的坑&#34;&gt;二、苹果手机的Safari浏览器不支持 keydown, keypress, keyup, change等事件的坑。&lt;/h2&gt;

&lt;p&gt;需求:在输入框中输入内容时，输入框后边显示清除按钮，点击可以清除输入框中的所有内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var keyword = $(&amp;quot;#search-keyword&amp;quot;);
var clear = $(&#39;.clear&#39;);

keyword.on(&#39;keyup&#39;, function(event) {
    if($(this).val().length&amp;gt;0){

        //显示清空输入框的小图标
        clear.show();

    }else{

        // 隐藏清空输入框的小图标
        clear.hide();
    }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是在iOS的Safari中, keydown、keypress、 keyup、change等事件都无效，考虑监听input和propertychange事件作为代替。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var keyword = $(&amp;quot;#search-keyword&amp;quot;);
var clear = $(&#39;.clear&#39;);

keyword.on(&#39;input propertychange&#39;, function(event) {
    if($(this).val().length&amp;gt;0){
        //显示清空输入框的小图标
        clear.show();
    }else{
        // 隐藏清空输入框的小图标
        clear.hide();
    }
});

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>用border-image&#43;SVG实现切角效果</title>
      <link>http://www.wangxingfeng.com/bevel-corners-svg.html</link>
      <pubDate>Sat, 06 May 2017 16:19:48 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/bevel-corners-svg.html</guid>
      <description>

&lt;p&gt;之前写了一篇文章，介绍了&lt;a href=&#34;http://www.wangxingfeng.com/bevel-corners.html&#34;&gt;基于CSS渐变来实现切角效果&lt;/a&gt;的方法。今天再来介绍另一种方法，即使用&lt;code&gt;border-image&lt;/code&gt;+&lt;code&gt;SVG&lt;/code&gt;的方式来实现&lt;code&gt;切角效果&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;border-image的工作原理&#34;&gt;border-image的工作原理&lt;/h2&gt;

&lt;p&gt;给一个元素设置边框，我们会使用&lt;code&gt;border&lt;/code&gt;这个属性。&lt;code&gt;border&lt;/code&gt;是&lt;code&gt;border-width&lt;/code&gt;、&lt;code&gt;border-style&lt;/code&gt;、&lt;code&gt;border-color&lt;/code&gt;等3个属性的简写形式。&lt;/p&gt;

&lt;p&gt;我们给div设置一个宽20px、实线、颜色为&lt;code&gt;#58a&lt;/code&gt;的边框。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	div{
		width:200px;
		height:150px; 
		margin:20px auto;
		border:40px solid #58a;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a;&#34;&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;border-image&lt;/code&gt;是CSS3的新属性，用于指定元素边框的背景图片。使用 border-image 时，border-style属性所设置的边框样式solid、dashed或dotted将不起作用。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border-image&lt;/code&gt;属性也是一个简写：包含&lt;code&gt;border-image-source&lt;/code&gt;、&lt;code&gt;border-image-slice&lt;/code&gt;、&lt;code&gt;border-image-width&lt;/code&gt;、&lt;code&gt;border-image-outset&lt;/code&gt;、&lt;code&gt;border-image-repeat&lt;/code&gt;等5个属性。&lt;/p&gt;

&lt;h3 id=&#34;1-border-image-source&#34;&gt;1. &lt;code&gt;border-image-source&lt;/code&gt;:&lt;/h3&gt;

&lt;p&gt;从这个属性的英文命名，我们就可以知道它表示的是边框背景图片资源的路径，默认值是&lt;code&gt;none&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	div{
		width:200px;
		height:150px;
		margin:20px auto;
		border:40px solid #58a;
		border-image-source:url(/images/adamcatlace.jpg);
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image-source:url(/images/adamcatlace.jpg)&#34;&gt;&lt;/div&gt;

&lt;h3 id=&#34;2-border-image-slice&#34;&gt;2. &lt;code&gt;border-image-slice&lt;/code&gt;:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;border-image-slice&lt;/code&gt;属性指定图像的边界向内偏移。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	div{
		width:200px;
		height:150px;
		margin:20px auto;
		border:40px solid #58a;
		border-image-source:url(/images/adamcatlace.jpg);
		border-image-slice:10% 20% 30% 40%; 
		border-image-repeat: none;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image:url(/images/adamcatlace.jpg);border-image-slice:10% 20% 30% 40%; border-image-repeat: round stretch;&#34;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	div{
		width:200px;
		height:150px;
		margin:20px auto;
		border:40px solid #58a;
		border-image-source:url(/images/adamcatlace.jpg);
		border-image-slice: 10% 30%;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image:url(/images/adamcatlace.jpg); border-image-slice: 10% 30%;&#34;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	div{
		width:200px;
		height:150px;
		margin:20px auto;
		border:40px solid #58a;
		border-image-source:url(/images/adamcatlace.jpg);
		border-image-slice: 30 30% 45;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image:url(/images/adamcatlace.jpg); border-image-slice: 30 30% 45;&#34;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	div{
		width:200px;
		height:150px;
		margin:20px auto;
		border:40px solid #58a;
		border-image-source:url(/images/adamcatlace.jpg);
		border-image-slice: 7 12 14 5; 
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image:url(/images/adamcatlace.jpg); border-image-slice: 7 12 14 5; &#34;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	div{
		width:200px;
		height:150px;
		margin:20px auto;
		border:40px solid #58a;
		border-image-source:url(/images/adamcatlace.jpg);
		border-image-slice: 10% fill 7 12; 
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image:url(/images/adamcatlace.jpg); border-image-slice: border-image-slice: 10% fill 7 12; &#34;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    .demo{
        border:30px solid transparent;
        border-image:1 url(&#39;data:image/svg+xml,\
            &amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;3&amp;quot; height=&amp;quot;3&amp;quot; fill=&amp;quot;red&amp;quot;&amp;gt;\
              &amp;lt;polygon points=&amp;quot;0,1 1,0 2, 0 3, 1 3, 2 2, 3 1, 3 0, 2&amp;quot;/&amp;gt;\
            &amp;lt;/svg&amp;gt;&#39;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;300&#34; height=&#34;300&#34; fill=&#34;purple&#34;&gt;
    &lt;polygon points=&#34;0, 100 100, 0 200, 0 300, 100 300, 200 200, 300 100, 300 0, 200&#34;/&gt;
&lt;/svg&gt;
&lt;div class=&#34;demo bevel-corners-8&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;
    
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>CSS实现切角效果</title>
      <link>http://www.wangxingfeng.com/bevel-corners.html</link>
      <pubDate>Tue, 02 May 2017 22:52:17 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/bevel-corners.html</guid>
      <description>

&lt;p&gt;扁平化设计风格中，很流行斜面切角，即把元素的一个或多个角切成45度的缺口。大多数网页开发者倾向于使用背景图片来实现切角效果。但使用背景图片会增加额外的HTTP请求，增加网页加载的时间，难以修改和维护。实际上，CSS已经足够强大，可以提供纯CSS的解决方案，我们仅用CSS代码就能实现切角效果。&lt;/p&gt;

&lt;h2 id=&#34;基于-css渐变-的切角效果&#34;&gt;基于&lt;code&gt;CSS渐变&lt;/code&gt;的切角效果&lt;/h2&gt;

&lt;p&gt;如果你对CSS渐变不陌生的话，应该知道CSS渐变可以接受&lt;code&gt;一个角度&lt;/code&gt;作为方向，还可以设置百分比的色标的位置。当然，色标的位置也可以设置为绝对的长度值。
&lt;style&gt;
    .demo{
        width:300px;
        height: 200px;
        margin:10px auto;
    }
    .demo1{
        background: linear-gradient(-45deg, red, green);
    }
    .demo2{
        background: linear-gradient(-45deg, red 20%, green 70%);
    }
    .demo3{
        background: linear-gradient(-45deg, red 20%, green 0);
    }
    .demo4{
        background: linear-gradient(-45deg, transparent 20%, green 0);
    }
    .demo5{
        background: linear-gradient(-45deg, transparent 30px, green 0),
                    linear-gradient(45deg, transparent 30px, red 0);
    }
    .demo6{
        background: linear-gradient(-45deg, transparent 30px, green 0) right,
                    linear-gradient(45deg, transparent 30px, red 0) left;
        background-size:50% 100%;
        background-repeat:no-repeat;
    }
    .demo7{
        background: linear-gradient(135deg, transparent 30px, green 0) top left,
            linear-gradient(-135deg, transparent 30px, red 0) top right,
            linear-gradient(-45deg, transparent 30px, pink 0) bottom right,
            linear-gradient(45deg, transparent 30px, blue 0) bottom left;
        background-size: 50% 50%;
        background-repeat: no-repeat;
    }
&lt;/style&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-普通的线性渐变&#34;&gt;1.普通的线性渐变&lt;/h3&gt;

&lt;p&gt;我们设置-45度为渐变方向，即从右下角到左上角渐变的方向。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, red, green);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;渲染的效果是这样的：&lt;/p&gt;

&lt;div class=&#34;demo demo1&#34;&gt;&lt;/div&gt;

&lt;h3 id=&#34;2-设置色标值的线性渐变&#34;&gt;2.设置色标值的线性渐变&lt;/h3&gt;

&lt;p&gt;我们给这两个色标设置一个百分比，看看会是什么效果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, red 20%, green 70%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述代码的意思从右下角到左上角渐变的方向上，0~20%的区域是纯红色的，20%-70%的区域是渐变，70%-100%的区域是纯绿色的。
&lt;div class=&#34;demo demo2&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-色标值为0的线性渐变&#34;&gt;3.色标值为0的线性渐变&lt;/h3&gt;

&lt;p&gt;如果我们再稍微做些修改，把第二个色标值改为0，会是什么效果呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, red 20%, green 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo demo3&#34;&gt;&lt;/div&gt;

&lt;p&gt;是不是有点惊讶？！&lt;/p&gt;

&lt;p&gt;我们得到的图形是没有渐变的。从右下角到左上角渐变的方向上，0-20%的区域是纯红色，20%-100%的区域就是纯绿色。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;注意：只要第二个色标值小于前一个色标值，那么浏览器就会默认解析为前一个色标值的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的CSS代码等价于：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, red 20%, green 20%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-切角效果&#34;&gt;4.切角效果&lt;/h3&gt;

&lt;p&gt;将上面的代码再稍作改动，把右下角的&lt;code&gt;红色&lt;/code&gt;改成&lt;code&gt;透明色&lt;/code&gt;, 就能得到一个右下角的&lt;code&gt;切角效果&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, transparent 20%, green 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo demo4&#34;&gt;&lt;/div&gt;

&lt;p&gt;其实，实际的网页开发中，我们更倾向于一个固定大小的切角。那么，我们可以把百分比改为绝对的长度值，比如把20%改为30px.&lt;/p&gt;

&lt;h3 id=&#34;5-两个切角效果&#34;&gt;5.两个切角效果&lt;/h3&gt;

&lt;p&gt;如果我们需要的切角不止一个，怎么实现呢？&lt;/p&gt;

&lt;p&gt;是不是可以声明两条渐变规则呢？我们来试一下效果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, transparent 30px, green 0),
                linear-gradient(45deg, transparent 30px, red 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo demo5&#34;&gt;&lt;/div&gt;

&lt;p&gt;尝试失败。因为默认情况下，两层渐变都会填满整个元素，导致相互重叠。这个时候，我们就需要用到&lt;code&gt;background-size&lt;/code&gt;和&lt;code&gt;background-repeat&lt;/code&gt;,让每层渐变分别占据整个元素的一半。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, transparent 30px, green 0) right,
                linear-gradient(45deg, transparent 30px, red 0) left;
    background-size:50% 100%;
    background-repeat:no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo demo6&#34;&gt;&lt;/div&gt;

&lt;h3 id=&#34;6-四个切角效果&#34;&gt;6.四个切角效果&lt;/h3&gt;

&lt;p&gt;看了两个切角的实现方式，想必你也能推断出实现&lt;code&gt;四个切角效果&lt;/code&gt;的思路了。我们需要&lt;code&gt;4层渐变&lt;/code&gt;，每层只占整个元素的&lt;code&gt;4分之一&lt;/code&gt;。下面的例子，我用了4种不同的颜色表示，这样可以更加直观的看出来每层渐变的大小和位置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(135deg, transparent 30px, green 0) top left,
        linear-gradient(-135deg, transparent 30px, red 0) top right,
        linear-gradient(-45deg, transparent 30px, pink 0) bottom right,
        linear-gradient(45deg, transparent 30px, blue 0) bottom left;
    background-size: 50% 50%;
    background-repeat: no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo demo7&#34;&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>如何用CSS代码实现网页设计中的菱形图片</title>
      <link>http://www.wangxingfeng.com/diamond-picture.html</link>
      <pubDate>Mon, 01 May 2017 22:00:03 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/diamond-picture.html</guid>
      <description>

&lt;p&gt;在网页设计中，我们常常能够看到被裁切成菱形的图片。&lt;/p&gt;

&lt;p&gt;传统的实现方式是预先在图像处理软件中把图片裁切好，当然这种方式的可维护性差。&lt;/p&gt;

&lt;p&gt;而现在，随着CSS的新特性的支持度越来越好了，CSS也越来越强大，我们已经可以用CSS代码来实现菱形图片了。&lt;/p&gt;

&lt;h2 id=&#34;1-基于tranform的实现方法&#34;&gt;1. 基于tranform的实现方法&lt;/h2&gt;

&lt;p&gt;原图
&lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; style=&#34;display:block; max-width: 200px; margin:0 auto&#34;&gt;
用一个&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 把图片包裹起来，对这个容器&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;应用&lt;code&gt;transform:rotate(45deg)&lt;/code&gt;, 进行旋转45度，我们得到如下的效果：图片应该也会跟着旋转了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div{
    width:200px;
    transform: rotate(45deg);
    overflow: hidden;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; &gt;
&lt;/div&gt;

&lt;p&gt;如果我们对里面的图片进行反向旋转45度，那么图片的旋转就会抵消掉。看看效果。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div&amp;gt;img{
    max-width:100%;
    transform: rotate(-45deg);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; class=&#34;diamond-img&#34;&gt;
&lt;/div&gt;

&lt;p&gt;我们得到了一个裁成&lt;code&gt;八边形&lt;/code&gt;的图片。&lt;/p&gt;

&lt;p&gt;问题出在哪里呢？我给外面的&lt;code&gt;div&lt;/code&gt;加一个边框，这样就容易看出来了。&lt;/p&gt;

&lt;div class=&#34;diamond-pic&#34; style=&#34;border:1px solid red&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; class=&#34;diamond-img&#34;&gt;
&lt;/div&gt;

&lt;p&gt;问题出在了这里图片的宽度是与容器&lt;code&gt;div&lt;/code&gt;的&lt;code&gt;边长&lt;/code&gt;相等，其实我们应该让图片的宽度与&lt;code&gt;对角线&lt;/code&gt;相等。&lt;/p&gt;

&lt;p&gt;运用勾股定理，可以计算出图片的宽度应该是√2倍，我们取1.42倍。&lt;/p&gt;

&lt;p&gt;如果通过&lt;code&gt;width属性&lt;/code&gt;设置来放大图片,会得到如下的效果。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div&amp;gt;img{
    max-width:142%;
    transform: rotate(-45deg);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; class=&#34;diamond-img&#34; style=&#34;max-width:142%;&#34;&gt;
&lt;/div&gt;

&lt;p&gt;因为是以图片的&lt;code&gt;左上角&lt;/code&gt;为原点进行放大的。我们还需要在通过设置&lt;code&gt;margin:-45px;&lt;/code&gt;才能得到菱形图片。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div&amp;gt;img{
    max-width:142%;
    transform: rotate(-45deg);
    margin:-45px;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; class=&#34;diamond-img&#34; style=&#34;max-width:142%; margin:-45px&#34;&gt;
&lt;/div&gt;

&lt;p&gt;当然，我们可以通过&lt;code&gt;transform:scale(1.42)&lt;/code&gt;来放大图片1.42倍。&lt;code&gt;scale()&lt;/code&gt;是以图片的&lt;code&gt;中心点&lt;/code&gt;进行缩放的，这样我们就不用额外地设置&lt;code&gt;margin&lt;/code&gt;值了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div&amp;gt;img{
    max-width:100%;
    transform: scale(1.42) rotate(-45deg);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; class=&#34;diamond-img&#34; style=&#34;transform: rotate(-45deg) scale(1.42);&#34;&gt;
&lt;/div&gt;

&lt;h2 id=&#34;2-基于裁切路径clip-path方法&#34;&gt;2. 基于裁切路径clip-path方法&lt;/h2&gt;

&lt;p&gt;第一种方法虽然可以奏效，但存在一些缺点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.需要一层额外的HTML标签；
2.代码不够直观；
3.如果处理的图片不是正方形，将无法得到一个菱形图片，如下图所示：
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adam-sleeping.jpg&#34; class=&#34;diamond-img&#34; style=&#34;transform: rotate(-45deg) scale(1.42);&#34;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SVG&lt;/code&gt;中，有个名叫&lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt;的元素，专门用来定义剪裁路径。其实CSS中也有一个类似的属性，即&lt;code&gt;clip-path属性&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;clip-path&lt;/code&gt;可以把元素裁切成我们想要的任何形状。我们通过&lt;code&gt;polygon()函数&lt;/code&gt;来指定一个菱形，参数是一系列用&lt;code&gt;逗号&lt;/code&gt;分隔的&lt;code&gt;坐标点&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;img{
    clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.wangxingfeng.com/images/adam-sleeping.jpg&#34; class=&#34;diamon-pic-clip-path&#34; &gt;&lt;/p&gt;

&lt;p&gt;如上图所示，这个方法可以很好的适应非正方形的图片。&lt;/p&gt;

&lt;p&gt;另外，因为&lt;code&gt;clip-path&lt;/code&gt;属性可以参与动画，我们还可以给这个图片动画过渡效果。比如，当我们的鼠标悬停到图片上时，菱形图片平滑地扩展为完整的原图。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;img{
    clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
    transition: 1s clip-path;
}
img:hover{
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.wangxingfeng.com/images/adam-sleeping.jpg&#34; class=&#34;diamon-pic-clip-path-2&#34; &gt;&lt;/p&gt;

&lt;p&gt;注意，除了谷歌浏览器，其他浏览器对这个clip-path属性的支持度都还不是很好。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用CSS创建内容不倾斜的平行四边形</title>
      <link>http://www.wangxingfeng.com/parallelograms.html</link>
      <pubDate>Sun, 30 Apr 2017 16:44:06 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/parallelograms.html</guid>
      <description>

&lt;h2 id=&#34;1-平行四边形&#34;&gt;1.平行四边形&lt;/h2&gt;

&lt;p&gt;普通的网页元素是矩形的。但有时候，我们需要创建可以传达出一种动感的形状，比如平行四边形。&lt;/p&gt;

&lt;p&gt;说到&lt;code&gt;倾斜&lt;/code&gt;，我们会想到使用&lt;code&gt;transform&lt;/code&gt;属性的&lt;code&gt;skew()&lt;/code&gt;方法来对普通的矩形元素进行&lt;code&gt;斜向拉伸&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;width:100px;
height:60px;
transform: skew(-30deg);
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:100px;height:60px;margin:10px auto;color:#fff;background: #673ab7;font-size: 16px;line-height: 60px;text-align: center;transform: skew(-30deg);&#34;&gt;平行四边形&lt;/div&gt;

&lt;p&gt;如上所示，我们得到了一个平行四边形，但是内容也跟着斜向变形了。我们希望只是容器倾斜，而内容是不倾斜的。怎么办？&lt;/p&gt;

&lt;h2 id=&#34;2-嵌套元素方案&#34;&gt;2.嵌套元素方案&lt;/h2&gt;

&lt;p&gt;首先，我们可以先在容器内部新增一个元素，包裹里面的内容，对这个元素再次进行斜向变形，值为负的外面容器的斜向变形值，这样刚好可以抵消掉斜向变形。&lt;/p&gt;

&lt;p&gt;HTML代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;parallelograms-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;parallelograms-inner&amp;quot;&amp;gt;
        平行四边形
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.parallelograms-container{
    width:100px;
    height:60px;
    transform: skew(-30deg);
}

.parallelograms-inner{
    transform:skew(30deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;parallelograms-container&#34;&gt;
    &lt;div class=&#34;parallelograms-inner&#34;&gt;
        平行四边形
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;3-伪元素方案&#34;&gt;3.伪元素方案&lt;/h2&gt;

&lt;p&gt;如果我们不想添加额外的HTML结构，能否用纯CSS来实现呢？&lt;/p&gt;

&lt;p&gt;答案是肯定的。&lt;/p&gt;

&lt;p&gt;我们可以考虑用CSS生成&lt;code&gt;伪元素&lt;/code&gt;，然后把所有样式（背景、边框等）应用到伪元素上，用&lt;code&gt;绝对定位&lt;/code&gt;将伪元素重叠在内容之下，然后再对伪元素进行&lt;code&gt;斜向拉伸&lt;/code&gt;变形。这样内容就可以保持不倾斜。&lt;/p&gt;

&lt;p&gt;HTML 代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;pseudo-container&amp;quot;&amp;gt;
    平行四边形
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS 代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.pseudo-container{
    position:relative;
    /* 内容的文字大小、颜色、内边距等样式在这里*/
    width:100px;
    height:60px;
    margin:0 auto;
    color:#fff;
    font-size: 16px;
    line-height: 60px;
    text-align: center;
    background:transparent;
}

.pseudo-container::before{
    content:&amp;quot;&amp;quot;;
    position:absolute;
    top:0;right:0;bottom:0;left:0;
    z-index:-1;
    background: #673ab7;
    transform: skew(-30deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如下：
&lt;div class=&#34;pseudo-container&#34;&gt;
    平行四边形
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;注意这里有个小坑。由于我们对这个伪元素设置了&lt;code&gt;z-index:-1&lt;/code&gt;, 所以，必须确保这个伪元素的容器、以及容器的&lt;code&gt;祖先元素&lt;/code&gt;(一直追溯到&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;的&lt;code&gt;直接子元素&lt;/code&gt;)的背景都必须是透明的，否则将会遮盖住这个&lt;code&gt;伪元素&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用CSS绘制椭圆、半椭圆、四分之一椭圆</title>
      <link>http://www.wangxingfeng.com/ellipse-border-radius.html</link>
      <pubDate>Sun, 30 Apr 2017 11:25:58 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/ellipse-border-radius.html</guid>
      <description>

&lt;h2 id=&#34;1-border-radius&#34;&gt;1.border-radius&lt;/h2&gt;

&lt;p&gt;border-radius可以为元素添加圆角边框，比如 按钮。&lt;/p&gt;

&lt;p&gt;&lt;button style=&#34;display:block; width:160px; height:60px; margin:10px auto;color:#fff;background: #ff5722; border-radius:8px; border:none;outline:none; &#34;&gt;
    示例按钮
&lt;/button&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-兼容性-ie9-以上都很好地能够兼容border-radius&#34;&gt;2.兼容性： IE9+以上都很好地能够兼容border-radius。&lt;/h2&gt;

&lt;h2 id=&#34;3-border-radius绘制圆形&#34;&gt;3.border-radius绘制圆形&lt;/h2&gt;

&lt;p&gt;如果我们给一个正方形的元素设置一个足够大的border-radius值（只要大于等于正方形边长的一半）的话，就可以被这个元素变成圆形。
但考虑到元素的高宽可能不是固定的，那么，我们可以设置百分比，这个百分比是基于元素的尺寸大小来解析的。当我们给一个正方形的元素设置border-radius：50%时，我们会得到一个自适应的圆形。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;width:200px;
height:200px;
border-radius:50%; /*在这里等价于border-radius:100px; 建议写成百分比*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如下所示：
&lt;div style=&#34;width:200px; height:200px; border-radius: 50%; background: #03a9f4; margin: 10px auto&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-border-radius绘制自适应椭圆&#34;&gt;4.border-radius绘制自适应椭圆&lt;/h2&gt;

&lt;p&gt;当元素的高宽不相等时，我们来看下会变成什么样子。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;width:300px; /*宽度变长了*/
height:200px;
border-radius:50%; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如下所示：
&lt;div style=&#34;width:300px; height:200px; border-radius: 50%; background: #cddc39; margin: 10px auto&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，当元素的高宽不相等，border-radius设置为50%，我们将会得到一个自适应的椭圆。&lt;/p&gt;

&lt;h2 id=&#34;5-border-radius绘制半个椭圆&#34;&gt;5.border-radius绘制半个椭圆&lt;/h2&gt;

&lt;p&gt;如果想要得到半个椭圆，怎么办呢？&lt;/p&gt;

&lt;div style=&#34;width:300px; height:100px; border-radius: 50% / 100% 100% 0 0; background: #795548; margin: 10px auto&#34;&gt;&lt;/div&gt;

&lt;p&gt;我们需要补充以下两个知识点：&lt;/p&gt;

&lt;p&gt;1.border-radius的值是可以单独指定水平方向上的半径和垂直方向上的半径的，中间需要用一个斜杠(/)分隔开两个值。&lt;/p&gt;

&lt;p&gt;2.border-radius是一个简写属性，我们可以单独为元素的每个角指定不同的值。border-radius展开的话是以下4个属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;border-top-left-radius
border-top-right-radius
border-bottom-right-radius
border-bottom-left-radius
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们不必分开写，可以给border-radius指定4个值，用空格分开。浏览器解析的时候，是按顺时针顺序应用到元素的四个角的（和margin、padding等其他的常见属性的简写类似）。&lt;/p&gt;

&lt;p&gt;我们来分析一下这个半椭圆形。&lt;/p&gt;

&lt;p&gt;1.它是垂直对称的，说明左上角和右上角的半径值是相同的；左下角和右下角的半径值也应该是相同的。&lt;/p&gt;

&lt;p&gt;2.它的顶部边缘是曲线的，说明左上角和右上角的半径值之和应该是等于这个元素的宽的。&lt;/p&gt;

&lt;p&gt;3.由前面两点可以推出，左上角和右上角的半径在水平方向上是50%。&lt;/p&gt;

&lt;p&gt;4.再看垂直方向上，顶部的两个圆角占据了整个元素的高度，而底部完全没有任何圆角。因此，可以推断左上角和右上角的半径在垂直方向上是100%，左下角和右下角在垂直方向上是0。&lt;/p&gt;

&lt;p&gt;综上所述，&lt;code&gt;border-radius&lt;/code&gt;的值应该是&lt;code&gt;50% / 100% 100% 0 0&lt;/code&gt;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;width:300px;
height:100px;
border-radius: 50% / 100% 100% 0 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:300px; height:100px; border-radius: 50% / 100% 100% 0 0; background: #795548; margin: 10px auto&#34;&gt;&lt;/div&gt;

&lt;p&gt;如果我们把垂直方向上的值改为0 0 100% 100%，则可以得到另一个半椭圆。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;width:300px;
height:100px;
border-radius: 50% /0 0 100% 100% ;
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:300px; height:100px; border-radius: 50% / 0 0 100% 100%; background: #4caf50; margin: 10px auto&#34;&gt;&lt;/div&gt;

&lt;p&gt;如果把&lt;code&gt;水平方向&lt;/code&gt;&lt;code&gt;border-raduis&lt;/code&gt;设置为&lt;code&gt;50%&lt;/code&gt;; &lt;code&gt;垂直方向&lt;/code&gt;上，左上角和左下角设置为&lt;code&gt;100%&lt;/code&gt;； 右上角和右下角设为&lt;code&gt;0&lt;/code&gt;，则可以得到一个&lt;code&gt;沿Y轴劈开的半椭圆形&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;width:150px;
height:200px;
border-radius: 100% 0 0 100% / 50%;
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:150px; height:200px; border-radius: 100% 0 0 100% / 50% ; background: #9c27b0; margin: 10px auto&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;6-border-radius绘制椭圆的四分之一&#34;&gt;6.border-radius绘制椭圆的四分之一&lt;/h2&gt;

&lt;p&gt;如果想要得到四分之一个椭圆呢？顺着之前的思路，我们可以设置其中一个角的&lt;code&gt;border-radius&lt;/code&gt;值为&lt;code&gt;100%&lt;/code&gt;，其他三个角为&lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;width:150px;
height:100px;
border-radius: 100% 0 0 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:150px; height:100px; border-radius: 100% 0 0 0 ; background: #9e9e9e; margin: 10px auto&#34;&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>用CSS实现图片翻转的动画效果</title>
      <link>http://www.wangxingfeng.com/css-flip.html</link>
      <pubDate>Sat, 29 Apr 2017 21:24:00 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/css-flip.html</guid>
      <description>

&lt;h2 id=&#34;用css实现页面或图片翻转的动画效果&#34;&gt;用CSS实现页面或图片翻转的动画效果&lt;/h2&gt;

&lt;p&gt;Web开发中常常会有动画的交互效果，以前我们只能用JavaScript来实现，随着浏览器对CSS3新特性的支持度越来越好，很多的特效都可以通过CSS代码来实现。&lt;/p&gt;

&lt;p&gt;我们在浏览网站的时候，经常能够看到图片会翻转的动画效果，比如&lt;code&gt;Demo 1&lt;/code&gt;所示。&lt;/p&gt;

&lt;div class=&#34;rotate-container&#34; style=&#34;border:2px solid #000;&#34;&gt;
    &lt;div class=&#34;flipper&#34;&gt;
        &lt;div class=&#34;front&#34;&gt;
            &lt;!-- 前面内容 --&gt;
            &lt;p &gt;正面内容&lt;/p&gt;
            &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/I/51fD0ZgQoXL._SL400_.jpg&#34; alt=&#34;&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;back&#34;&gt;
            &lt;p&gt;反面内容&lt;/p&gt;
            &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/G/28/kindle/merch/2014/campaign/Gen7-Launch/Associate/Associate_AssociateCenrter_300_250_Family._V325383366_.jpg&#34; alt=&#34;&#34;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;能否用纯CSS来实现这种翻转动画效果呢？答案是肯定的。&lt;/p&gt;

&lt;p&gt;我们知道CSS3的&lt;code&gt;transform&lt;/code&gt;属性非常强大，可以实现2D或者3D的旋转、缩放、移动或倾斜。&lt;/p&gt;

&lt;p&gt;上述Demo1是沿着Y轴3D翻转的，我们可以想到用&lt;code&gt;transform&lt;/code&gt;属性的&lt;code&gt;rotateY()&lt;/code&gt;方法来实现。&lt;/p&gt;

&lt;h2 id=&#34;示例代码&#34;&gt;示例代码&lt;/h2&gt;

&lt;p&gt;HTML代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;rotate-container&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;flipper&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;front&amp;quot;&amp;gt;
            &amp;lt;!-- 前面内容 --&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;back&amp;quot;&amp;gt;
            &amp;lt;!-- 背面内容 --&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.rotate-container:hover .flipper{
    transform: rotateY(180deg);
}

.rotate-container, .front, .back {
    width: 320px;
    height: 480px;
}

.flipper {
    transition-duration: 1s;  
    transform-style: preserve-3d;
    position: relative;
}

.front, .back {
    backface-visibility: hidden;
    position: absolute;
    top: 0;
    left: 0;
}

.front {
    z-index: 2;
}

.back {
    transform: rotateY(180deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;关键的技术点解释&#34;&gt;关键的技术点解释：&lt;/h2&gt;

&lt;h3 id=&#34;1-transform-变形&#34;&gt;1.transform：变形&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;transform: rotateY(180deg)&lt;/code&gt; 表示沿着Y轴旋转180度。
&lt;style&gt;
    .rotateY{
        transition-duration:1.5s;
    }
    .rotateY45:hover{
        transform: rotateY(45deg);
    }
    .rotateY90:hover{
        transform: rotateY(90deg);
    }
    .rotateY180:hover{
        transform: rotateY(180deg);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;}
.bf-hidden{
    transform-style: preserve-3d;
    backface-visibility: hidden;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/style&gt;
&lt;p&gt;Demo2：沿着Y轴旋转180度(旋转到背面可见)&lt;/p&gt;
&lt;div class=&#34;rotateY rotateY180&#34;&gt;
    &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/I/51fD0ZgQoXL._SL400_.jpg&#34; alt=&#34;&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Demo3：沿着Y轴旋转90度&lt;/p&gt;
&lt;div class=&#34;rotateY rotateY90&#34;&gt;
    &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/I/51fD0ZgQoXL._SL400_.jpg&#34; alt=&#34;&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Demo4：沿着Y轴旋转45度&lt;/p&gt;
&lt;div class=&#34;rotateY rotateY45&#34;&gt;
    &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/I/51fD0ZgQoXL._SL400_.jpg&#34; alt=&#34;&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-transform-style-指定该元素的子元素所在空间&#34;&gt;2.transform-style：指定该元素的子元素所在空间。&lt;/h3&gt;

&lt;p&gt;指定该元素的子元素是（看起来）位于三维空间内，还是在该元素所在的平面内被扁平化。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;transform-style&lt;/code&gt;属性有两个参数，&lt;code&gt;flat&lt;/code&gt;和&lt;code&gt;preserve-3d&lt;/code&gt;。&lt;code&gt;flat&lt;/code&gt;为默认值，指定子元素位于此元素所在平面内; &lt;code&gt;preserve-3d&lt;/code&gt;指定子元素定位在三维空间内。&lt;/p&gt;

&lt;h3 id=&#34;3-backface-visibility-指定元素旋转到背面时是否可见&#34;&gt;3.backface-visibility 指定元素旋转到背面时是否可见。&lt;/h3&gt;

&lt;p&gt;默认为visible，即背面是可见的, 如&lt;code&gt;Demo2&lt;/code&gt;所示。&lt;/p&gt;

&lt;p&gt;在Demo1中，由于翻转过来的是另外一张图片，所以设置为backface-visibility:hidden背面是不可见的。&lt;/p&gt;

&lt;p&gt;&lt;p&gt;Demo5: 沿着Y轴旋转180度(旋转到背面不可见)&lt;/p&gt;
&lt;div class=&#34;rotate-container&#34;&gt;
    &lt;div class=&#34;flipper&#34; &gt;
        &lt;div class=&#34;front&#34;&gt;
            &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/I/51fD0ZgQoXL._SL400_.jpg&#34; alt=&#34;&#34;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-transition-duration-表示完成过渡效果需要花费的时间&#34;&gt;4.transition-duration：表示完成过渡效果需要花费的时间。&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;transition-duration：1s&lt;/code&gt;可以用简写的形式&lt;code&gt;transition:1s&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;5-position-absolute-绝对定位&#34;&gt;5.position:absolute：绝对定位。&lt;/h3&gt;

&lt;p&gt;使用绝对定位&lt;code&gt;position:absolute&lt;/code&gt;把翻转前后的两个元素摆放到同一个位置。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS预处理器之Less</title>
      <link>http://www.wangxingfeng.com/less.html</link>
      <pubDate>Sun, 23 Apr 2017 16:28:38 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/less.html</guid>
      <description>

&lt;h2 id=&#34;1-css&#34;&gt;1.CSS&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;CSS&lt;/code&gt;层叠样式表(Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。&lt;/p&gt;

&lt;p&gt;由于&lt;code&gt;CSS&lt;/code&gt;不想普通的编程语言有自己的变量、常量、条件语句、函数等编程语法，而只是一行行单纯的属性描述，所以写起来相当的费事，代码难以组织和维护。&lt;/p&gt;

&lt;h2 id=&#34;2-dry&#34;&gt;2.DRY&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DRY&lt;/code&gt;, 即 Don&amp;rsquo;t Repeat Yourself， 是一种为程序员所熟悉的编程理念，优秀的程序员通常遵循这种规范编写代码。
&lt;code&gt;DRY&lt;/code&gt;可以显著地提升代码的可维护性，比如在需要改变某个参数的时候，只需要改动一处或者少数几处地方。&lt;/p&gt;

&lt;h2 id=&#34;3-css预处理器&#34;&gt;3.CSS预处理器&lt;/h2&gt;

&lt;p&gt;纯粹的&lt;code&gt;CSS&lt;/code&gt;代码并没有变量、嵌套、条件等概念，难以做到DRY, 这令程序员们头痛不已。因此，有程序员尝试为 &lt;code&gt;CSS&lt;/code&gt; 增加一些编程的的特性，使得在 &lt;code&gt;CSS&lt;/code&gt; 中使用变量、简单的程序逻辑、函数成为可能。&lt;/p&gt;

&lt;p&gt;目前，最常用的CSS预处理器，主要有3个：&lt;code&gt;Less&lt;/code&gt;、&lt;code&gt;SASS&lt;/code&gt;、&lt;code&gt;Stylus&lt;/code&gt;。
从&lt;a href=&#34;https://github.com/showcases/css-preprocessors&#34;&gt;GitHub&lt;/a&gt;上可以看出&lt;code&gt;Less&lt;/code&gt;是最受欢迎的&lt;code&gt;CSS&lt;/code&gt;预处理器。
&lt;img src=&#34;http://www.wangxingfeng.com/images/2017042301.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-less&#34;&gt;3.Less&lt;/h2&gt;

&lt;h3 id=&#34;3-1-安装&#34;&gt;3.1 安装&lt;/h3&gt;

&lt;p&gt;因为&lt;code&gt;Less&lt;/code&gt;是使用&lt;code&gt;JavaScript&lt;/code&gt;语言写的，它可以运行在服务端的&lt;code&gt;NodeJS&lt;/code&gt;环境中，因此，最简单的安装方式是用 &lt;code&gt;npm install&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g less # -g表示全局安装
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-2-编译&#34;&gt;3.2 编译&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Less&lt;/code&gt;文件的后缀名为&lt;code&gt;.less&lt;/code&gt;. 浏览器并不能直接识别&lt;code&gt;.less&lt;/code&gt;的文件，需要编译成&lt;code&gt;.css&lt;/code&gt;结尾的&lt;code&gt;CSS&lt;/code&gt;样式文件。
假设你已经有一个&lt;code&gt;less&lt;/code&gt;文件&lt;code&gt;demo.less&lt;/code&gt;，在命令行执行以下命令，即可编译生成&lt;code&gt;demo.css&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lessc demo.less demo.css  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;lessc&lt;/code&gt;是Less的命令，第一个参数demo.less为指定需要编译的源文件名， 第二个参数demo.css为编译后的CSS文件名。&lt;/p&gt;

&lt;p&gt;如果需要编译成压缩的CSS文件，可以全局安装下载一个Less官方提供的插件 &lt;a href=&#34;https://github.com/less/less-plugin-clean-css&#34;&gt;clean-css plugin&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g less-plugin-clean-css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，在命令行输入如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lessc --clean-css demo.less demo.min.css #多了一个参数 --clean-css
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-3-基本语法&#34;&gt;3.3 基本语法&lt;/h3&gt;

&lt;h4 id=&#34;3-3-1-变量&#34;&gt;3.3.1 变量&lt;/h4&gt;

&lt;p&gt;Less 的变量名使用&lt;code&gt;@&lt;/code&gt;符号开始, 比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@nice-blue: #5B83AD;
@light-blue: @nice-blue + #111;

#header {
  color: @light-blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译之后，得到如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#header {
  color: #6c94be;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：Less的变量本质上是常量，只能定义 一次。&lt;/p&gt;

&lt;h4 id=&#34;3-3-2-mixins&#34;&gt;3.3.2 Mixins&lt;/h4&gt;

&lt;p&gt;将一系列属性从一个规则集引入(“混合”)到另一个规则集的方式。&lt;/p&gt;

&lt;p&gt;比如，先定义了一个规则&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;想要在其他的地方使用到这个规则，可以这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#menu a {
  color: #111;
  .bordered;
}

.post a {
  color: red;
  .bordered;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
#menu a {
  color: #111;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
.post a {
  color: red;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-3-嵌套&#34;&gt;3.3.3 嵌套&lt;/h4&gt;

&lt;p&gt;根据HTML结构来嵌套样式规则。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#header {
  color: black;
  .navigation {
    font-size: 12px;
  }
  .logo {
    width: 300px;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译之后的CSS样式文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#header {
  color: black;
}
#header .navigation {
  font-size: 12px;
}
#header .logo {
  width: 300px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还可以结合伪类来嵌套，比如“清除浮动”的样式可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.clearfix {
  display: block;
  zoom: 1;

  &amp;amp;:after {
    content: &amp;quot; &amp;quot;;
    display: block;
    font-size: 0;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述代码里的符号&lt;code&gt;&amp;amp;&lt;/code&gt;表示当前选择器的父选择器。&lt;/p&gt;

&lt;p&gt;编译之后的结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.clearfix {
  display: block;
  zoom: 1;
}
.clearfix:after {
  content: &amp;quot; &amp;quot;;
  display: block;
  font-size: 0;
  height: 0;
  clear: both;
  visibility: hidden;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-4-媒体查询及嵌套&#34;&gt;3.3.4 媒体查询及嵌套&lt;/h4&gt;

&lt;p&gt;媒体查询（Media query ）可以嵌套在选择器中，编译时，会自动把选择器复制到媒体查询体内。媒体查询规则里还可以嵌套媒体查询。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.screen-color {
  @media screen {
    color: green;
    @media (min-width: 768px) {
      color: red;
    }
  }
  @media tv {
    color: black;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@media screen {
  .screen-color {
    color: green;
  }
}
@media screen and (min-width: 768px) {
  .screen-color {
    color: red;
  }
}
@media tv {
  .screen-color {
    color: black;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-5-运算&#34;&gt;3.3.5 运算&lt;/h4&gt;

&lt;p&gt;在Less中，数值、颜色、变量可以进行加、减、乘、除的运算。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@color: #224488 / 2; //results in #112244
background-color: #112244 + #111; // result is #223355

@base: 5%;
@filler: @base * 2; // result is 10%
@other: @base + @filler; // result is 15%
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-6-函数&#34;&gt;3.3.6 函数&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Less&lt;/code&gt;提供了许多用于转换颜色、处理字符串 以及进行算术运算的函数。具体可以参考&lt;a href=&#34;http://lesscss.org/functions/&#34;&gt;Less Function Reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这些函数使用起来非常简单。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@base: #f04615;
@width: 0.5;

.class {
  width: percentage(@width); 
  color: saturate(@base, 5%);
  background-color: spin(lighten(@base, 25%), 8);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上述代码中我们使用 函数&lt;code&gt;percentage()&lt;/code&gt; 将 0.5 转换为 50%，然后用 函数&lt;code&gt;saturate()&lt;/code&gt;将基础颜色值的饱和度增加了 5%，再使用 函数lighten() 将背景颜色的亮度增加了 25%，最后通过函数spin()又将色相值增加 8。编译之后：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.class {
  width: 50%;
  color: #f6430f;
  background-color: #f8b38d;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-5-官网&#34;&gt;3.5 官网&lt;/h3&gt;

&lt;p&gt;更多内容，可以访问&lt;a href=&#34;http://lesscss.org/&#34;&gt;http://lesscss.org/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ES6的块级作用域以及let、const命令</title>
      <link>http://www.wangxingfeng.com/es6-let-const</link>
      <pubDate>Fri, 07 Apr 2017 20:18:56 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/es6-let-const</guid>
      <description>

&lt;h2 id=&#34;1-块级作用域&#34;&gt;1.块级作用域&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ES5&lt;/code&gt; 只有&lt;code&gt;全局作用域&lt;/code&gt;和&lt;code&gt;函数作用域&lt;/code&gt;，没有&lt;code&gt;块级作用域&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在函数外部声明的变量，都是全局变量，容易导致变量冲突。因此，我们不得不使用&lt;code&gt;立即执行函数&lt;/code&gt;来避免全局变量的冲突。另外，在循环内用来计数的变量也会泄露成全局变量。&lt;/p&gt;

&lt;p&gt;为此，&lt;code&gt;ES6&lt;/code&gt; 引入了&lt;code&gt;块级作用域&lt;/code&gt;的概念。&lt;/p&gt;

&lt;h2 id=&#34;2-let-声明变量&#34;&gt;2.&lt;code&gt;let&lt;/code&gt; 声明变量&lt;/h2&gt;

&lt;p&gt;2.1 &lt;code&gt;let&lt;/code&gt;声明的变量，只在它所在的代码块（块级作用域）内有效。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    var a = 1;
    let b = 2;
}
a //1 
b // Uncaught ReferenceError: b is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.2 &lt;code&gt;for循环&lt;/code&gt;的计数器使用&lt;code&gt;let&lt;/code&gt;命令来声明。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (let i = 0; i &amp;lt; 10; i++) {
    //
}
console.log(i);  //ReferenceError: i is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.3 不存在&lt;code&gt;变量提升&lt;/code&gt;。变量应该遵循&lt;code&gt;先声明后使用&lt;/code&gt;的原则。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var&lt;/code&gt;声明的变量会提升到作用域的顶部,在变量可以在声明之前可以使用，值为&lt;code&gt;undefined&lt;/code&gt;。&lt;code&gt;let&lt;/code&gt;声明的变量不存在&lt;code&gt;变量提升&lt;/code&gt;, 声明之前使用，会报错。&lt;/p&gt;

&lt;p&gt;2.4 暂时性死区(temporal dead zone，简称 TDZ):&lt;/p&gt;

&lt;p&gt;只要&lt;code&gt;块级作用域&lt;/code&gt;内存在&lt;code&gt;let命令&lt;/code&gt;，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。在let命令声明该变量之前的区域内，该变量不能使用，即使外部声明了该变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let a = 1;
if (true) {
    // TDZ开始
    console.log(a); //Uncaught ReferenceError: a is not defined

    let a;  //TDZ结束
}

let b = 1;
if (true) {
    let b = 100; 
    console.log(b);  //100
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以这么理解暂时性死区：只要一进入当前的块级作用域，所有将要使用的变量就已经存在了，但是还暂时无法获取，只有等到声明变量之后，才可以获取和使用该变量。&lt;/p&gt;

&lt;p&gt;2.5 不能重复声明变量&lt;/p&gt;

&lt;p&gt;在同一个作用域内，&lt;code&gt;let&lt;/code&gt;命令不能重复声明同一个变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function () {
    let x = 10;
    var x = 20;
}
// Uncaught SyntaxError: Identifier &#39;x&#39; has already been declared
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-const-声明常量&#34;&gt;3.&lt;code&gt;const&lt;/code&gt; 声明常量&lt;/h2&gt;

&lt;p&gt;3.1 &lt;code&gt;ES6&lt;/code&gt; 引入了&lt;code&gt;常量&lt;/code&gt;的概念。&lt;code&gt;const 命令&lt;/code&gt;是用来声明&lt;code&gt;常量&lt;/code&gt;的, 通常用&lt;code&gt;大写字母&lt;/code&gt;表示常量。一旦声明，常量的值就不能改变。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const PI = 3.1415;
PI = 3; //Uncaught TypeError: Assignment to constant variable.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.2 `声明变量时，必须立即赋值。否则会报错。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const SIN //Uncaught SyntaxError: Missing initializer in const declaration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.3 &lt;code&gt;const&lt;/code&gt;的作用域与&lt;code&gt;let&lt;/code&gt;命令相同：常量只在它声明时所在的&lt;code&gt;块级作用域&lt;/code&gt;内有效。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (true) {
  const A = 5;
}
A // Uncaught ReferenceError: A is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.4 &lt;code&gt;const&lt;/code&gt;命令声明的常量也是不提升，同样存在&lt;code&gt;暂时性死区&lt;/code&gt;，只能在声明的位置后面使用。同时，也不能重复声明。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>